services:
  configserver:
    image: smarthomehub/config-server:0.0.1
    container_name: config-server
    restart: always
    environment:
      SERVER_PORT: 8071
    ports:
      - 8071:8071
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health | grep UP || exit 1"
      interval: 2s
      timeout: 3s
      retries: 10
      start_period: 5s

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.1
    container_name: keycloak
    restart: always
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - ./keycloak/imports/:/opt/keycloak/data/import
    command: -v start-dev --import-realm
    ports:
      - 8080:8080
      
  gatewayserver:
    image: smarthomehub/gateway-server:0.0.1-SNAPSHOT
    container_name: gateway-server
    restart: always
    environment:
      SERVER_PORT: 8072
    depends_on:
      eurekaserver:
        condition: service_healthy
    ports:
      - 8072:8072
      
  eurekaserver:
    image: smarthomehub/eureka-server:0.0.1-SNAPSHOT
    container_name: eureka-server
    restart: always
    environment:
      SERVER_PORT: 8073
    depends_on:
      configserver:
        condition: service_healthy
    ports:
      - 8073:8073
    healthcheck:
      test: "curl --fail --silent localhost:8073/actuator/health | grep UP || exit 1"
      interval: 2s
      timeout: 3s
      retries: 10
      start_period: 5s

  musicservice:
    image: smarthomehub/music-service:0.0.1-SNAPSHOT
    container_name: music-service
    restart: always
    ports:
      - 8081:8081
    environment:
      SPRING_ACTIVE_PROFILE: "dev"
      SPRING_DATASOURCE_URL: jdbc:postgresql://musicservicedb-dev:5432/db-dev
      SPRING_DATASOURCE_USERNAME: devuser
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      kafkaserver:
        condition: service_healthy
      postgres-db-dev:
        condition: service_started
      postgres-db-prod:
        condition: service_started

  sprinklerservice:
    image: smarthomehub/sprinkler-service:0.0.1
    container_name: sprinkler-service
    restart: always
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      kafkaserver:
        condition: service_healthy
      sprinkler-db-dev:
        condition: service_started
      sprinkler-db-prod:
        condition: service_started
    ports:
      - 8083:8083

  notificationservice:
    image: smarthomehub/notification-service:0.0.1-SNAPSHOT
    container_name: notification-service
    restart: always
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://notificationdb:5432/postgres
      SPRING_PROFILES_ACTIVE: prod
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      kafkaserver:
        condition: service_healthy
      notificationdb:
        condition: service_started

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - 2181:2181
    networks:
      backend:
        aliases:
          - "zookeeper"

  kafkaserver:
    image: wurstmeister/kafka:latest
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - "kafka"

  redisserver:
    image: redis:alpine
    ports:
      - 6379:6379
    networks:
      backend:
        aliases:
          - "redis"

  sprinkler-db-dev:
    image: postgres
    container_name: sprinkler-db-dev
    restart: always
    environment:
      POSTGRES_DB: sprinkler_dev
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: postgrespassword
    volumes:
      - ./src/main/resources/init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./src/main/resources/data.sql:/docker-entrypoint-initdb.d/2-data.sql
    ports:
      - 5432:5432

  sprinkler-db-prod:
    image: postgres
    container_name: sprinkler-db-prod
    restart: always
    environment:
      POSTGRES_DB: sprinkler_prod
      POSTGRES_USER: produser
      POSTGRES_PASSWORD: postgrespassword
    volumes:
      - ./src/main/resources/init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./src/main/resources/data.sql:/docker-entrypoint-initdb.d/2-data.sql
    ports:
      - 5433:5432

  notificationdb:
    image: postgres:latest
    container_name: notificationdb
    restart: always
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - 5434:5432
    volumes:
      - pgdata:/var/lib/postgresql/data

  postgres-db-dev:
    image: postgres:latest
    container_name: musicservicedb-dev
    restart: always
    environment:
      POSTGRES_DB: db-dev
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: password
      POSTGRES_ROOT_PASSWORD: password
    ports:
      - 5435:5432

  postgres-db-prod:
    image: postgres:latest
    container_name: musicservicedb-prod
    restart: always
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: produser
      POSTGRES_PASSWORD: password
      POSTGRES_ROOT_PASSWORD: password
    ports:
      - 5436:5432

volumes:
  pgdata:
  musicservice-data: